name: "Build"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "eu-west-1"
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Check out source code
        uses: actions/checkout@v3

      - name: Build
        run: go build .

  test:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Install multy
        run: curl https://raw.githubusercontent.com/multycloud/multy/main/install.sh | sh

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.1.*'
          terraform_wrapper: false

      - name: Start server
        run: |
          ~/.multy/bin/multy serve --port=8000 --dry_run --env=local &> $HOME/server-logs.txt &
          sleep 2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Check out source code
        uses: actions/checkout@v3

      - name: Test
        run: "parallel --tagstring '{%}' TF_ACC=1 TF_VAR_cloud={} USER_SECRET_PREFIX={}-${{github.run_id}} go test ./multy/... -v -timeout 60m ::: aws azure gcp"
        env:
          TF_ACC: 1

      - name: Print server logs
        if: always()
        run: "cat $HOME/server-logs.txt"


  check-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Check out source code
        uses: actions/checkout@v3

      - name: Generate documentation
        run: go run github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs

      - name: Process changes
        run: |
          line=$(git status | grep 'modified:' | wc -l)
          if [ $line -eq 0 ]; then 
            echo "up to date"
          else
            echo "Documentation is not up to date"
            exit 1
          fi